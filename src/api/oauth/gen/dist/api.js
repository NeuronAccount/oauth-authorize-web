"use strict";
/**
 * Oauth Private API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "http://localhost/private-api/v1/oauth".replace(/\/+$/, "");
var BaseAPI = /** @class */ (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
/**
 * DefaultApi - fetch parameter creator
 */
exports.DefaultApiFetchParamCreator = {
    /**
     *
     * @summary
     * @param jwt
     * @param responseType
     * @param clientId
     * @param redirectUri
     * @param scope
     * @param state
     */
    authorize: function (params, options) {
        // verify required parameter "jwt" is set
        if (params["jwt"] == null) {
            throw new Error("Missing required parameter jwt when calling authorize");
        }
        // verify required parameter "responseType" is set
        if (params["responseType"] == null) {
            throw new Error("Missing required parameter responseType when calling authorize");
        }
        // verify required parameter "clientId" is set
        if (params["clientId"] == null) {
            throw new Error("Missing required parameter clientId when calling authorize");
        }
        // verify required parameter "redirectUri" is set
        if (params["redirectUri"] == null) {
            throw new Error("Missing required parameter redirectUri when calling authorize");
        }
        // verify required parameter "scope" is set
        if (params["scope"] == null) {
            throw new Error("Missing required parameter scope when calling authorize");
        }
        // verify required parameter "state" is set
        if (params["state"] == null) {
            throw new Error("Missing required parameter state when calling authorize");
        }
        var baseUrl = "/authorize";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "jwt": params["jwt"],
            "response_type": params["responseType"],
            "client_id": params["clientId"],
            "redirect_uri": params["redirectUri"],
            "scope": params["scope"],
            "state": params["state"],
        });
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * DefaultApi - functional programming interface
 */
exports.DefaultApiFp = {
    /**
     *
     * @summary
     * @param jwt
     * @param responseType
     * @param clientId
     * @param redirectUri
     * @param scope
     * @param state
     */
    authorize: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.authorize(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * DefaultApi - object-oriented interface
 */
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary
     * @param jwt
     * @param responseType
     * @param clientId
     * @param redirectUri
     * @param scope
     * @param state
     */
    DefaultApi.prototype.authorize = function (params, options) {
        return exports.DefaultApiFp.authorize(params, options)(this.fetch, this.basePath);
    };
    return DefaultApi;
}(BaseAPI));
exports.DefaultApi = DefaultApi;
/**
 * DefaultApi - factory interface
 */
exports.DefaultApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary
         * @param jwt
         * @param responseType
         * @param clientId
         * @param redirectUri
         * @param scope
         * @param state
         */
        authorize: function (params, options) {
            return exports.DefaultApiFp.authorize(params, options)(fetch, basePath);
        },
    };
};
